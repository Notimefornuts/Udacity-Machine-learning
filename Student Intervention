
Project 2: Supervised Learning
Building a Student Intervention System
1. Classification vs Regression
Your goal is to identify students who might need early intervention - which type of supervised machine learning problem is this, classification or regression? Why?
2. Exploring the Data
Let's go ahead and read in the student dataset first.
To execute a code cell, click inside it and press Shift+Enter.
In [21]:
# Import libraries
import numpy as np
import pandas as pd
from time import time
from sklearn.metrics import f1_score
In [22]:
# Read student data
student_data = pd.read_csv("student-data.csv")
print "Student data read successfully!"
# Note: The last column 'passed' is the target/label, all other are feature columns
print student_data.shape[0]
print student_data.shape[1]
print student_data.head()
Student data read successfully!
395
31
  school sex  age address famsize Pstatus  Medu  Fedu     Mjob      Fjob  \
0     GP   F   18       U     GT3       A     4     4  at_home   teacher   
1     GP   F   17       U     GT3       T     1     1  at_home     other   
2     GP   F   15       U     LE3       T     1     1  at_home     other   
3     GP   F   15       U     GT3       T     4     2   health  services   
4     GP   F   16       U     GT3       T     3     3    other     other   

   ...   internet romantic  famrel  freetime  goout Dalc Walc health absences  \
0  ...         no       no       4         3      4    1    1      3        6   
1  ...        yes       no       5         3      3    1    1      3        4   
2  ...        yes       no       4         3      2    2    3      3       10   
3  ...        yes      yes       3         2      2    1    1      5        2   
4  ...         no       no       4         3      2    1    2      5        4   

  passed  
0     no  
1     no  
2    yes  
3    yes  
4    yes  

[5 rows x 31 columns]
Now, can you find out the following facts about the dataset?
Total number of students
Number of students who passed
Number of students who failed
Graduation rate of the class (%)
Number of features
Use the code block below to compute these values. Instructions/steps are marked using TODOs.
In [23]:
# TODO: Compute desired values - replace each '?' with an appropriate expression/function call

n_students = student_data.shape[0]
n_features = student_data.shape[1]
n_passed = np.sum(student_data['passed'] == 'yes')
n_failed = np.sum(student_data['passed'] == 'no')
grad_rate = 100*float(n_passed)/float((n_passed+n_failed))
print "Total number of students: {}".format(n_students)
print "Number of students who passed: {}".format(n_passed)
print "Number of students who failed: {}".format(n_failed)
print "Number of features: {}".format(n_features)
print "Graduation rate of the class: {:.2f}%".format(grad_rate)
Total number of students: 395
Number of students who passed: 265
Number of students who failed: 130
Number of features: 31
Graduation rate of the class: 67.09%
3. Preparing the Data
In this section, we will prepare the data for modeling, training and testing.
Identify feature and target columns
It is often the case that the data you obtain contains non-numeric features. This can be a problem, as most machine learning algorithms expect numeric data to perform computations with.
Let's first separate our data into feature and target columns, and see if any features are non-numeric.
Note: For this dataset, the last column ('passed') is the target or label we are trying to predict.
In [24]:
# Extract feature (X) and target (y) columns
feature_cols = list(student_data.columns[:-1])  # all columns but last are features
target_col = student_data.columns[-1]  # last column is the target/label
print "Feature column(s):-\n{}".format(feature_cols)
print "Target column: {}".format(target_col)

X_all = student_data[feature_cols]  # feature values for all students
y_all = student_data[target_col]  # corresponding targets/labels
print "\nFeature values:"
print X_all.head()  # print the first 5 rows
Feature column(s):-
['school', 'sex', 'age', 'address', 'famsize', 'Pstatus', 'Medu', 'Fedu', 'Mjob', 'Fjob', 'reason', 'guardian', 'traveltime', 'studytime', 'failures', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences']
Target column: passed

Feature values:
  school sex  age address famsize Pstatus  Medu  Fedu     Mjob      Fjob  \
0     GP   F   18       U     GT3       A     4     4  at_home   teacher   
1     GP   F   17       U     GT3       T     1     1  at_home     other   
2     GP   F   15       U     LE3       T     1     1  at_home     other   
3     GP   F   15       U     GT3       T     4     2   health  services   
4     GP   F   16       U     GT3       T     3     3    other     other   

    ...    higher internet  romantic  famrel  freetime goout Dalc Walc health  \
0   ...       yes       no        no       4         3     4    1    1      3   
1   ...       yes      yes        no       5         3     3    1    1      3   
2   ...       yes      yes        no       4         3     2    2    3      3   
3   ...       yes      yes       yes       3         2     2    1    1      5   
4   ...       yes       no        no       4         3     2    1    2      5   

  absences  
0        6  
1        4  
2       10  
3        2  
4        4  

[5 rows x 30 columns]
Preprocess feature columns
As you can see, there are several non-numeric columns that need to be converted! Many of them are simply yes/no, e.g. internet. These can be reasonably converted into 1/0 (binary) values.
Other columns, like Mjob and Fjob, have more than two values, and are known as categorical variables. The recommended way to handle such a column is to create as many columns as possible values (e.g. Fjob_teacher, Fjob_other, Fjob_services, etc.), and assign a 1 to one of them and 0 to all others.
These generated columns are sometimes called dummy variables, and we will use the pandas.get_dummies() function to perform this transformation.
In [74]:
# Preprocess feature columns
def preprocess_features(X):
    outX = pd.DataFrame(index=X.index)  # output dataframe, initially empty

    # Check each column
    for col, col_data in X.iteritems():
        # If data type is non-numeric, try to replace all yes/no values with 1/0
        if col_data.dtype == object:
            col_data = col_data.replace(['yes', 'no'], [1, 0])
        # Note: This should change the data type for yes/no columns to int

        # If still non-numeric, convert to one or more dummy variables
        if col_data.dtype == object:
            col_data = pd.get_dummies(col_data, prefix=col)  # e.g. 'school' => 'school_GP', 'school_MS'

        outX = outX.join(col_data)  # collect column(s) in output dataframe

    return outX

X_all = preprocess_features(X_all)
print "Processed feature columns ({}):-\n{}".format(len(X_all.columns), list(X_all.columns))
print "-------------------------------"
Processed feature columns (48):-
['school_GP', 'school_MS', 'sex_F', 'sex_M', 'age', 'address_R', 'address_U', 'famsize_GT3', 'famsize_LE3', 'Pstatus_A', 'Pstatus_T', 'Medu', 'Fedu', 'Mjob_at_home', 'Mjob_health', 'Mjob_other', 'Mjob_services', 'Mjob_teacher', 'Fjob_at_home', 'Fjob_health', 'Fjob_other', 'Fjob_services', 'Fjob_teacher', 'reason_course', 'reason_home', 'reason_other', 'reason_reputation', 'guardian_father', 'guardian_mother', 'guardian_other', 'traveltime', 'studytime', 'failures', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences']
-------------------------------

F1 score for all 'yes' on students: 0.8030
In [79]:
# First, decide how many training vs test samples you want
num_all = student_data.shape[0]  # same as len(student_data)
num_train = 300  # about 75% of the data
num_test = num_all - num_train

# TODO: Then, select features (X) and corresponding labels (y) for the training and test sets
# Note: Shuffle the data or randomly select samples to avoid any bias due to ordering in the dataset
from sklearn.cross_validation import train_test_split
def shuffle_split_data(X, y):
    
    # Shuffle and split the data
   
    X_train, X_test, y_train, y_test = train_test_split(
      X, y, stratify=y_all,test_size=num_test, random_state=42)
    return X_train, y_train, X_test, y_test
try:
    X_train, y_train, X_test, y_test = shuffle_split_data(X_all, y_all)
    print "Successfully shuffled and split the data!"
except:
    print "Something went wrong with shuffling and splitting the data."

print "Training set: {} samples".format(X_train.shape[0])
print "Test set: {} samples".format(X_test.shape[0])
# Note: If you need a validation set, extract it from within training data
print "Grad rate of the training set: {:.2f}%".format(100 * (y_train == 'yes').mean())
print "Grad rate of the testing set: {:.2f}%".format(100 * (y_test == 'yes').mean())
print "\nF1 score for all 'yes' on students: {:.4f}".format(
    f1_score(y_true = ['yes']*n_passed + ['no']*n_failed, y_pred = ['yes']*n_students, 
             pos_label='yes', average='binary'))
Successfully shuffled and split the data!
Training set: 300 samples
Test set: 95 samples
Grad rate of the training set: 67.00%
Grad rate of the testing set: 67.37%

F1 score for all 'yes' on students: 0.8030
4. Training and Evaluating Models
Choose 3 supervised learning models that are available in scikit-learn, and appropriate for this problem. For each model:
What are the general applications of this model? What are its strengths and weaknesses?
Given what you know about the data so far, why did you choose this model to apply?
Fit this model to the training data, try to predict labels (for both training and test sets), and measure the F1 score. Repeat this process with different training set sizes (100, 200, 300), keeping test set constant.
Produce a table showing training time, prediction time, F1 score on training set and F1 score on test set, for each training set size.
Note: You need to produce 3 such tables - one for each model.
In [80]:
# Train a model

def train_classifier(clf, X_train, y_train):

    print "Training {}...".format(clf.__class__.__name__)
    start = time()
    clf.fit(X_train, y_train)
    end = time()
    print "Trained model in {:.4f} seconds".format(end - start)

# TODO: Choose a model, import it and instantiate an object

from sklearn.linear_model import LogisticRegression
#gnb = GaussianNB()
#svc = LinearSVC(C=1.0)
#rfc = RandomForestClassifier(n_estimators=100)

clf = LogisticRegression()
# Fit model to training data
train_classifier(clf, X_train, y_train)  # note: using entire training set here
#print clf  # you can inspect the learned model by printing it
Training LogisticRegression...
Trained model in 0.0000 seconds
In [81]:
# Predict on training set and compute F1 score
def predict_labels(clf, features, target):
    start = time()
    y_pred = clf.predict(features)
    end = time()
    print "Made predictions in {:.4f} seconds.".format(end - start)
    return f1_score(target.values, y_pred, pos_label='yes')

train_f1_score = predict_labels(clf, X_train, y_train)
Made predictions in 0.0000 seconds.
In [ ]:
 
In [84]:
# Train and predict using different training set sizes
def train_predict(clf, X_train, y_train, X_test, y_test):
    ''' Train and predict using a classifer based on F1 score. '''
    
    # Indicate the classifier and the training set size
    print "Training a {} using a training set size of {}. . .".format(clf.__class__.__name__, len(X_train))
    
    # Train the classifier
    train_classifier(clf, X_train, y_train)
    y_pred = clf.predict(X_test)
    # Print the results of prediction for both training and testing
    print "F1 score for training set: {:.4f}.".format(predict_labels(clf, X_train, y_train))
    print "F1 score for test set: {:.4f}.".format(predict_labels(clf, X_test, y_test))
    print "F1 score for predicting all \"yes\" on test set: {:.10f}".format(
    f1_score(y_test, ['yes']*len(y_test), pos_label='yes', average='binary'))
    print

# TODO: Run the helper function above for desired subsets of training data
# Note: Keep the test set constant

train_predict(clf, X_train[:100], y_train[:100], X_test, y_test)
train_predict(clf, X_train[:200], y_train[:200], X_test, y_test)
train_predict(clf, X_train, y_train, X_test, y_test)
Training a LinearSVC using a training set size of 100. . .
Training LinearSVC...
Trained model in 0.0160 seconds
Made predictions in 0.0000 seconds.
F1 score for training set: 0.8811.
Made predictions in 0.0000 seconds.
F1 score for test set: 0.6935.
F1 score for predicting all "yes" on test set: 0.8050314465

Training a LinearSVC using a training set size of 200. . .
Training LinearSVC...
Trained model in 0.0310 seconds
Made predictions in 0.0000 seconds.
F1 score for training set: 0.8283.
Made predictions in 0.0000 seconds.
F1 score for test set: 0.7571.
F1 score for predicting all "yes" on test set: 0.8050314465

Training a LinearSVC using a training set size of 300. . .
Training LinearSVC...
Trained model in 0.0470 seconds
Made predictions in 0.0000 seconds.
F1 score for training set: 0.8377.
Made predictions in 0.0000 seconds.
F1 score for test set: 0.7724.
F1 score for predicting all "yes" on test set: 0.8050314465

In [83]:
# TODO: Train and predict using two other models
from sklearn.svm import LinearSVC
#clf=LinearSVC(C=1.0)
#train_predict(clf, X_train[:100], y_train[:100], X_test, y_test)
#train_predict(clf, X_train[:200], y_train[:200], X_test, y_test)
#train_predict(clf, X_train, y_train, X_test, y_test)
from sklearn.metrics import f1_score
from sklearn.naive_bayes import GaussianNB
import matplotlib.pyplot as plt
#clf=GaussianNB()
#train_predict(clf, X_train[:100], y_train[:100], X_test, y_test)
#train_predict(clf, X_train[:200], y_train[:200], X_test, y_test)
#train_predict(clf, X_train, y_train, X_test, y_test)
plt.figure(figsize=(10, 10))
ax1 = plt.subplot2grid((3, 1), (0, 0), rowspan=2)
ax2 = plt.subplot2grid((3, 1), (2, 0))
for clf in [GaussianNB(), LinearSVC(C=1.0, random_state=0)]:
    train_predict(clf, X_train[:100], y_train[:100], X_test, y_test)
    train_predict(clf, X_train[:200], y_train[:200], X_test, y_test)
    train_predict(clf, X_train, y_train, X_test, y_test)
Training a GaussianNB using a training set size of 100. . .
Training GaussianNB...
Trained model in 0.0000 seconds
Made predictions in 0.0000 seconds.
F1 score for training set: 0.7752.
Made predictions in 0.0000 seconds.
F1 score for test set: 0.6457.
F1 score for predicting all "yes" on test set: 0.8050

Training a GaussianNB using a training set size of 200. . .
Training GaussianNB...
Trained model in 0.0000 seconds
Made predictions in 0.0000 seconds.
F1 score for training set: 0.8060.
Made predictions in 0.0000 seconds.
F1 score for test set: 0.7218.
F1 score for predicting all "yes" on test set: 0.8050

Training a GaussianNB using a training set size of 300. . .
Training GaussianNB...
Trained model in 0.0000 seconds
Made predictions in 0.0160 seconds.
F1 score for training set: 0.8134.
Made predictions in 0.0000 seconds.
F1 score for test set: 0.7761.
F1 score for predicting all "yes" on test set: 0.8050

Training a LinearSVC using a training set size of 100. . .
Training LinearSVC...
Trained model in 0.0000 seconds
Made predictions in 0.0000 seconds.
F1 score for training set: 0.8811.
Made predictions in 0.0000 seconds.
F1 score for test set: 0.6935.
F1 score for predicting all "yes" on test set: 0.8050

Training a LinearSVC using a training set size of 200. . .
Training LinearSVC...
Trained model in 0.0320 seconds
Made predictions in 0.0000 seconds.
F1 score for training set: 0.8283.
Made predictions in 0.0000 seconds.
F1 score for test set: 0.7571.
F1 score for predicting all "yes" on test set: 0.8050

Training a LinearSVC using a training set size of 300. . .
Training LinearSVC...
Trained model in 0.0310 seconds
Made predictions in 0.0000 seconds.
F1 score for training set: 0.8377.
Made predictions in 0.0000 seconds.
F1 score for test set: 0.7724.
F1 score for predicting all "yes" on test set: 0.8050

5. Choosing the Best Model
Based on the experiments you performed earlier, in 1-2 paragraphs explain to the board of supervisors what single model you chose as the best model. Which model is generally the most appropriate based on the available data, limited resources, cost, and performance?
In 1-2 paragraphs explain to the board of supervisors in layman's terms how the final model chosen is supposed to work (for example if you chose a Decision Tree or Support Vector Machine, how does it make a prediction).
Fine-tune the model. Use Gridsearch with at least one important parameter tuned and with at least 3 settings. Use the entire training set for this.
What is the model's final F1 score?
In [71]:
# TODO: Fine-tune your model and report the best F1 score


from sklearn.metrics import f1_score
from sklearn.metrics import make_scorer
from sklearn.grid_search import GridSearchCV

c_range = np.arange(0.01,1.01,0.01)
parameters = {'C': c_range, 'penalty':['l1','l2']}
f1_scorer = make_scorer(f1_score, pos_label="yes")
reg = GridSearchCV(LogisticRegression(), parameters, scoring=f1_scorer)
reg.fit(X_train, y_train)
clf = reg.best_estimator_
print("Best parameters set found on development set:")

print(reg.best_params_)
print
print("Grid scores on development set:")
print "Tuned model has a training F1 score of {:.4f}.".format(predict_labels(clf, X_train, y_train))
print "Tuned model has a testing F1 score of {:.4f}.".format(predict_labels(clf, X_test, y_test))
Best parameters set found on development set:
{'penalty': 'l1', 'C': 0.080000000000000002}

Grid scores on development set:
Made predictions in 0.0000 seconds.
Tuned model has a training F1 score of 0.8270.
Made predictions in 0.0000 seconds.
Tuned model has a testing F1 score of 0.7973.
In [26]:
 
0.829166666667
0.8
In [ ]:
 
